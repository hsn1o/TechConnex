// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  email      String    @unique
  password   String // üîê new
  role       Role[]
  name       String
  phone      String? // ‚òéÔ∏è optional
  kycStatus  KycStatus @default(pending_verification)
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())

  //Profiles
  providerProfile ProviderProfile?
  customerProfile CustomerProfile?
  resume          Resume? // üìÑ 1-to-1

  //Relations
  requests           ServiceRequest[] @relation("CustomerRequests")
  projectsAsCustomer Project[]        @relation("CustomerProjects")
  projectsAsProvider Project[]        @relation("ProviderProjects")
  matches            AiMatch[]
  reviewsGiven       Review[]         @relation("Reviewer")
  reviewsReceived    Review[]         @relation("Recipient")
  sentMessages       Message[]        @relation("SentMessages")
  receivedMessages   Message[]        @relation("ReceivedMessages")
  invoicesAsProvider Invoice[]        @relation("InvoicesAsProvider")
  invoicesAsCustomer Invoice[]        @relation("InvoicesAsCustomer")
  Proposal           Proposal[]
  KycDocument        KycDocument[]
  // Saved providers relations
  savedProviders     SavedProvider[]  @relation("UserSavedProviders")
  savedByUsers       SavedProvider[]  @relation("ProviderSavedByUsers")

  //Notifications
  notifications Notification[]

  Dispute Dispute[]

  ReviewReply ReviewReply[]

  ReviewVote ReviewVote[]
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid // ‚úÖ fix
  type      String // proposal, payment, message, system
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ProviderProfile {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid

  // Profile
  bio             String?
  location        String?
  hourlyRate      Float?
  availability    String?  @db.VarChar(50)
  languages       String[] // üÜï Spoken languages
  website         String? // üÜï Personal or company site
  profileVideoUrl String? // üÜï Profile video

  //Performance Metrics
  rating        Decimal @default(0.00) @db.Decimal(3, 2)
  totalReviews  Int     @default(0) @map("total_reviews")
  totalProjects Int     @default(0) @map("total_projects")
  totalEarnings Decimal @default(0.00) @map("total_earnings") @db.Decimal(15, 2)
  viewsCount    Int     @default(0) @map("views_count")
  successRate   Decimal @default(0.00) @map("success_rate") @db.Decimal(5, 2)
  responseTime  Int     @default(0) @map("response_time")
  isFeatured    Boolean @default(false) @map("is_featured")
  isVerified    Boolean @default(false) @map("is_verified")
  completion    Int? // üÜï Completion %

  //Skills & Work pref
  skills                   String[]
  certifications           Certification[] // ‚ûï relation
  portfolios               ProjectPortfolio[] // ‚ûï relation
  performance              PerformanceStat? // ‚ûï relation
  yearsExperience          Int?
  minimumProjectBudget     Decimal?           @map("minimum_project_budget") @db.Decimal(10, 2)
  maximumProjectBudget     Decimal?           @map("maximum_project_budget") @db.Decimal(10, 2)
  preferredProjectDuration String?            @map("preferred_project_duration") @db.VarChar(50)
  workPreference           String             @default("remote") @map("work_preference") @db.VarChar(50)
  teamSize                 Int                @default(1) @map("team_size")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("users")
}

model CustomerProfile {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid

  //Identity
  description String?
  industry    String?
  location    String?
  website     String? // üÜï Personal or company site
  logoUrl     String?  @map("logo_url")
  socialLinks Json? // LinkedIn, Twitter, etc.
  languages   String[] // üÜï Spoken languages

  // Business Profile
  companySize     String?  @map("company_size") @db.VarChar(50)
  employeeCount   Int?     @map("employee_count")
  establishedYear Int?     @map("established_year")
  annualRevenue   Decimal? @db.Decimal(12, 2)
  fundingStage    String? // e.g. Bootstrap, Seed, Series A

  // Hiring Preferences
  preferredContractTypes String[]
  averageBudgetRange     String?
  remotePolicy           String? // On-site, Remote, Hybrid
  hiringFrequency        String? // occasional, regular, enterprise
  categoriesHiringFor    String[]

  // Platform Engagement
  completion     Int?
  rating         Float?    @default(0.0)
  reviewCount    Int?      @default(0)
  totalSpend     Decimal?  @db.Decimal(12, 2)
  projectsPosted Int?      @default(0)
  lastActiveAt   DateTime?

  // Branding & Culture
  mission      String?
  values       String[]
  benefits     Json?
  mediaGallery String[]

  // Trust & Compliance

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("companies")
}

model Certification {
  id         String          @id @default(uuid()) @db.Uuid
  profile    ProviderProfile @relation(fields: [profileId], references: [id])
  profileId  String          @db.Uuid
  name       String
  issuer     String
  issuedDate DateTime
  verified   Boolean         @default(false)

  // NEW
  serialNumber String?
  sourceUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // <-- add @default(now())

  @@index([issuer])
  @@index([serialNumber])
}

model PerformanceStat {
  id             String          @id @default(uuid()) @db.Uuid
  profile        ProviderProfile @relation(fields: [profileId], references: [id])
  profileId      String          @unique @db.Uuid
  totalProjects  Int             @default(0)
  completionRate Float           @default(0)
  onTimeDelivery Float           @default(0)
  responseTime   String          @default("N/A") // Example: "2 hours"
  repeatClients  Float           @default(0)
}

model ProjectPortfolio {
  id          String          @id @default(uuid()) @db.Uuid
  profile     ProviderProfile @relation(fields: [profileId], references: [id])
  profileId   String          @db.Uuid
  title       String
  description String
  techStack   String[] // Tags: React, Node.js etc
  client      String?
  date        DateTime
  imageUrl    String?
  externalUrl String? // Optional live link
}

model Review {
  id                  String   @id @default(uuid()) @db.Uuid
  // Many reviews can belong to one project
  project             Project  @relation(fields: [projectId], references: [id])
  projectId           String   @db.Uuid
  reviewer            User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId          String   @db.Uuid
  recipient           User     @relation("Recipient", fields: [recipientId], references: [id])
  recipientId         String   @db.Uuid
  company             String? // Optional: shown as "TechStart Sdn Bhd"
  role                String? // e.g. ‚ÄúProject Manager‚Äù
  content             String // The review text
  rating              Float // e.g. 4.9
  communicationRating Int?     @map("communication_rating")
  qualityRating       Int?     @map("quality_rating")
  timelinessRating    Int?     @map("timeliness_rating")
  createdAt           DateTime @default(now())

  ReviewReply ReviewReply[]

  ReviewVote ReviewVote[]
}

model ReviewReply {
  id        String   @id @default(uuid()) @db.Uuid
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  content   String
  createdAt DateTime @default(now())
}

model ReviewVote {
  id        String   @id @default(uuid()) @db.Uuid
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  value     Int      @default(1) // could be +1 (helpful), -1 (not helpful)
  createdAt DateTime @default(now())

  @@unique([reviewId, userId]) // prevent double voting
}

model Resume {
  id          String   @id @default(uuid()) @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.Uuid
  fileUrl     String // S3 or local path
  description String? // Summarized by LangChain
  uploadedAt  DateTime @default(now())
}

model ServiceRequest {
  id             String          @id @default(uuid()) @db.Uuid
  customer       User            @relation("CustomerRequests", fields: [customerId], references: [id])
  customerId     String          @db.Uuid
  title          String
  description    String
  category       ServiceCategory
  budgetMin      Float
  budgetMax      Float
  aiStackSuggest String[]
  timeline       String?
  priority       String?
  ndaSigned      Boolean         @default(false) // ‚úÖ Make sure this is added
  status         RequestStatus   @default(OPEN)
  projectId      String?         @db.Uuid
  project        Project?        @relation(fields: [projectId], references: [id])
  proposals      Proposal[] // üëà Add this
  matches        AiMatch[]
  requirements   Json? // or String?
  deliverables   Json? // or String?
  createdAt      DateTime        @default(now())
}

model Proposal {
  id             String         @id @default(uuid()) @db.Uuid
  provider       User           @relation(fields: [providerId], references: [id])
  providerId     String         @db.Uuid
  serviceRequest ServiceRequest @relation(fields: [requestId], references: [id])
  requestId      String         @db.Uuid
  bidAmount      Float
  deliveryTime   Int // in days
  coverLetter    String
  attachmentUrl  String? // e.g., PDF proposal or portfolio
  milestones     Milestone[] // Optional: Link to separate milestone model
  createdAt      DateTime       @default(now())
}

model AiMatch {
  id         String         @id @default(uuid()) @db.Uuid
  request    ServiceRequest @relation(fields: [requestId], references: [id])
  requestId  String         @db.Uuid
  provider   User           @relation(fields: [providerId], references: [id])
  providerId String         @db.Uuid
  matchScore Float
  aiReason   String
}

model Project {
  id             String           @id @default(uuid()) @db.Uuid
  title          String
  description    String
  category       ServiceCategory
  budgetMin      Float
  budgetMax      Float
  timeline       String?
  priority       String?
  skills         String[] // if using Postgres array
  customer       User             @relation("CustomerProjects", fields: [customerId], references: [id])
  customerId     String           @db.Uuid
  provider       User             @relation("ProviderProjects", fields: [providerId], references: [id])
  providerId     String           @db.Uuid
  status         ProjectStatus
  ndaSigned      Boolean          @default(false)
  milestones     Milestone[]
  payments       Payment[]
  reviews        Review[] // 1-to-1
  messages       Message[]
  invoices       Invoice[]
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  ServiceRequest ServiceRequest[]
  requirements   String?
  deliverables   String?

  Dispute Dispute[]
}

model Invoice {
  id            String  @id @default(uuid()) @db.Uuid
  invoiceNumber String  @unique @map("invoice_number") @db.VarChar(100)
  customer      User    @relation("InvoicesAsCustomer", fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String  @map("customer_id") @db.Uuid
  providerId    String  @map("provider_id") @db.Uuid
  projectId     String? @map("project_id") @db.Uuid
  paymentId     String? @db.Uuid

  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @default(0.00) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount Decimal @default(0.00) @map("discount_amount") @db.Decimal(10, 2)
  platformFee    Decimal @default(0.00) @db.Decimal(10, 2) // üëà new
  totalAmount    Decimal @map("total_amount") @db.Decimal(10, 2)
  currency       String  @default("MYR") @db.VarChar(3)

  status    String    @default("draft") @db.VarChar(50)
  issueDate DateTime  @map("issue_date") @db.Date
  dueDate   DateTime  @map("due_date") @db.Date
  paidDate  DateTime? @map("paid_date") @db.Date

  notes       String?
  terms       String?
  invoiceData Json?   @map("invoice_data")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  project  Project?  @relation(fields: [projectId], references: [id])
  provider User      @relation("InvoicesAsProvider", fields: [providerId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("invoices")
}

model Milestone {
  id           String          @id @default(uuid()) @db.Uuid
  project      Project         @relation(fields: [projectId], references: [id])
  projectId    String          @db.Uuid
  title        String
  description  String
  dueDate      DateTime
  amount       Float
  status       MilestoneStatus @default(PENDING)
  payments     Payment[]
  Proposal     Proposal?       @relation(fields: [proposalId], references: [id])
  proposalId   String?         @db.Uuid
  deliverables Json? // files, links, docs submitted by provider
  approvedAt   DateTime?
  approvedBy   String?         @db.Uuid // customer who approved
  submittedAt  DateTime?
}

model Payment {
  id          String     @id @default(uuid()) @db.Uuid
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String     @db.Uuid
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId String?    @db.Uuid

  // Stripe info
  stripePaymentIntentId String? // ID from Stripe
  stripeTransferId      String? // For payout to provider
  stripeRefundId        String? // If refunded/dispute

  amount    Float
  currency  String        @default("MYR") @db.VarChar(3)
  method    PaymentMethod
  status    PaymentStatus
  Invoice   Invoice?      @relation(fields: [invoiceId], references: [id])
  invoiceId String?       @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Dispute Dispute[]
}

model Message {
  id              String      @id @default(uuid()) @db.Uuid
  projectId       String?     @map("project_id") @db.Uuid
  senderId        String      @map("sender_id") @db.Uuid
  receiverId      String      @map("receiver_id") @db.Uuid
  messageType     MessageType @default(text) @map("message_type")
  subject         String?     @db.VarChar(255)
  content         String
  attachments     String[]
  isRead          Boolean     @default(false) @map("is_read")
  readAt          DateTime?   @map("read_at") @db.Timestamptz(6)
  parentMessageId String?     @map("parent_message_id") @db.Uuid
  messageThreadId String?     @map("message_thread_id") @db.Uuid
  isSystemMessage Boolean     @default(false) @map("is_system_message")
  priority        String      @default("normal") @db.VarChar(20)
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender        User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  parentMessage Message?  @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies       Message[] @relation("MessageReplies")

  @@map("messages")
}

// NEW: Saved providers/bookmarks
model SavedProvider {
  id         String   @id @default(uuid()) @db.Uuid
  user       User     @relation("UserSavedProviders", fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  provider   User     @relation("ProviderSavedByUsers", fields: [providerId], references: [id], onDelete: Cascade)
  providerId String   @db.Uuid
  createdAt  DateTime @default(now())

  @@unique([userId, providerId])
  @@map("saved_providers")
}

// ‚îÄ‚îÄ KYC enums
enum KycDocType {
  PROVIDER_ID // Passport/IC
  COMPANY_REG // SSM/registration doc
  COMPANY_DIRECTOR_ID // optional director ID
  OTHER
}

enum KycDocStatus {
  uploaded
  verified
  rejected
}

// ‚îÄ‚îÄ KYC documents per user (admin reviews files; user has overall kycStatus already)
model KycDocument {
  id          String       @id @default(uuid()) @db.Uuid
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @db.Uuid
  type        KycDocType
  fileUrl     String
  filename    String
  mimeType    String?
  status      KycDocStatus @default(uploaded)
  reviewNotes String?
  reviewedBy  String?      @db.Uuid // admin userId (optional now)
  uploadedAt  DateTime     @default(now())
  reviewedAt  DateTime?

  @@index([userId])
  @@index([type])
}

model Dispute {
  id         String        @id @default(uuid()) @db.Uuid
  payment    Payment       @relation(fields: [paymentId], references: [id])
  paymentId  String        @db.Uuid
  project    Project       @relation(fields: [projectId], references: [id])
  projectId  String        @db.Uuid // ‚úÖ fix
  raisedBy   User          @relation(fields: [raisedById], references: [id])
  raisedById String        @db.Uuid // ‚úÖ fix
  reason     String // e.g. "Missed deadline", "Low quality", "Payment not released"
  status     DisputeStatus @default(OPEN)
  resolution String? // decision or admin notes
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum DisputeStatus {
  OPEN // User raised dispute
  UNDER_REVIEW // Admin/platform investigating
  RESOLVED // Agreement reached
  REJECTED // Dispute not accepted
}

enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum KycStatus {
  active
  inactive
  suspended
  pending_verification
}

enum ServiceCategory {
  WEB_DEVELOPMENT        @map("web_development")
  MOBILE_APP_DEVELOPMENT @map("mobile_app_development")
  CLOUD_SERVICES         @map("cloud_services")
  IOT_SOLUTIONS          @map("iot_solutions")
  DATA_ANALYTICS         @map("data_analytics")
  CYBERSECURITY          @map("cybersecurity")
  UI_UX_DESIGN           @map("ui_ux_design")
  DEVOPS                 @map("devops")
  AI_ML_SOLUTIONS        @map("ai_ml_solutions")
  SYSTEM_INTEGRATION     @map("system_integration")
}

enum RequestStatus {
  OPEN
  MATCHED
  CLOSED
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  DISPUTED
}

enum MilestoneStatus {
  PENDING // Created, not funded yet
  FUNDED // Escrowed
  SUBMITTED // Work submitted by provider
  APPROVED // Accepted by customer
  REJECTED // Customer sent back
  DISPUTED // Dispute raised
  RELEASED // Payment released to provider
}

enum PaymentMethod {
  FPX
  STRIPE
  EWALLET
}

enum PaymentStatus {
  ESCROWED
  RELEASED
  REFUNDED
}

enum MessageType {
  text
  file
  system
  proposal
}
