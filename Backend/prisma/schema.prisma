// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid()) @db.Uuid
  email              String           @unique
  password           String // üîê new
  role               Role
  kycStatus          KycStatus        @default(pending_verification)
  name               String
  phone              String? // ‚òéÔ∏è optional
  isVerified         Boolean          @default(false)
  createdAt          DateTime         @default(now())
  providerProfile    ProviderProfile?
  customerProfile    CustomerProfile?
  resume             Resume? // üìÑ 1-to-1
  requests           ServiceRequest[] @relation("CustomerRequests")
  projectsAsCustomer Project[]        @relation("CustomerProjects")
  projectsAsProvider Project[]        @relation("ProviderProjects")
  matches            AiMatch[]
  reviewsGiven       Review[]         @relation("Reviewer")
  reviewsReceived    Review[]         @relation("Recipient")
  sentMessages       Message[]        @relation("SentMessages")
  receivedMessages   Message[]        @relation("ReceivedMessages")
  invoicesAsProvider Invoice[]        @relation("InvoicesAsProvider")
  invoicesAsCustomer Invoice[]        @relation("InvoicesAsCustomer")
  Proposal           Proposal[]
  KycDocument        KycDocument[]
}

model ProviderProfile {
  id                       String             @id @default(uuid()) @db.Uuid
  user                     User               @relation(fields: [userId], references: [id])
  userId                   String             @unique @db.Uuid
  location                 String?
  bio                      String?
  hourlyRate               Float?
  availability             String?            @db.VarChar(50)
  portfolioUrls            String[]
  profileVideoUrl          String? // üÜï Profile video
  certifications           Certification[] // ‚ûï relation
  languages                String[] // üÜï Spoken languages
  rating                   Decimal            @default(0.00) @db.Decimal(3, 2)
  totalReviews             Int                @default(0) @map("total_reviews")
  totalProjects            Int                @default(0) @map("total_projects")
  totalEarnings            Decimal            @default(0.00) @map("total_earnings") @db.Decimal(15, 2)
  viewsCount               Int                @default(0) @map("views_count")
  successRate              Decimal            @default(0.00) @map("success_rate") @db.Decimal(5, 2)
  responseTime             Int                @default(0) @map("response_time")
  isFeatured               Boolean            @default(false) @map("is_featured")
  isVerified               Boolean            @default(false) @map("is_verified")
  skills                   String[]
  yearsExperience          Int?
  website                  String? // üÜï Personal or company site
  completion               Int? // üÜï Completion %
  performance              PerformanceStat? // ‚ûï relation
  portfolios               ProjectPortfolio[] // ‚ûï relation
  minimumProjectBudget     Decimal?           @map("minimum_project_budget") @db.Decimal(10, 2)
  maximumProjectBudget     Decimal?           @map("maximum_project_budget") @db.Decimal(10, 2)
  preferredProjectDuration String?            @map("preferred_project_duration") @db.VarChar(50)
  workPreference           String             @default("remote") @map("work_preference") @db.VarChar(50)
  teamSize                 Int                @default(1) @map("team_size")
  companySize              String?            @map("company_size") @db.VarChar(50)
  createdAt                DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("users")
}

model CustomerProfile {
  id              String   @id @default(uuid()) @db.Uuid
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique @db.Uuid
  bio             String?
  location        String?
  companySize     String?  @map("company_size") @db.VarChar(50)
  description     String?
  website         String? // üÜï Personal or company site
  logoUrl         String?  @map("logo_url")
  establishedYear Int?     @map("established_year")
  employeeCount   Int?     @map("employee_count")
  languages       String[] // üÜï Spoken languages
  completion      Int? // üÜï Completion %
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("companies")
}

model Certification {
  id           String          @id @default(uuid()) @db.Uuid
  profile      ProviderProfile @relation(fields: [profileId], references: [id])
  profileId    String          @db.Uuid
  name         String
  issuer       String
  issuedDate   DateTime
  verified     Boolean         @default(false)

  // NEW
  serialNumber String?
  sourceUrl    String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt  // <-- add @default(now())

  @@index([issuer])
  @@index([serialNumber])
}


model PerformanceStat {
  id             String          @id @default(uuid()) @db.Uuid
  profile        ProviderProfile @relation(fields: [profileId], references: [id])
  profileId      String          @unique @db.Uuid
  totalProjects  Int             @default(0)
  completionRate Float           @default(0)
  onTimeDelivery Float           @default(0)
  responseTime   String          @default("N/A") // Example: "2 hours"
  repeatClients  Float           @default(0)
}

model ProjectPortfolio {
  id          String          @id @default(uuid()) @db.Uuid
  profile     ProviderProfile @relation(fields: [profileId], references: [id])
  profileId   String          @db.Uuid
  title       String
  description String
  techStack   String[] // Tags: React, Node.js etc
  client      String?
  date        DateTime
  imageUrl    String?
  externalUrl String? // Optional live link
}

model Review {
  id                  String   @id @default(uuid()) @db.Uuid
  project             Project  @relation(fields: [projectId], references: [id])
  projectId           String   @unique @db.Uuid // 1 review per project
  reviewer            User     @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewerId          String   @db.Uuid
  recipient           User     @relation("Recipient", fields: [recipientId], references: [id])
  recipientId         String   @db.Uuid
  company             String? // Optional: shown as "TechStart Sdn Bhd"
  role                String? // e.g. ‚ÄúProject Manager‚Äù
  content             String // The review text
  rating              Float // e.g. 4.9
  communicationRating Int?     @map("communication_rating")
  qualityRating       Int?     @map("quality_rating")
  timelinessRating    Int?     @map("timeliness_rating")
  createdAt           DateTime @default(now())
}

model Resume {
  id          String   @id @default(uuid()) @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique @db.Uuid
  fileUrl     String // S3 or local path
  description String? // Summarized by LangChain
  uploadedAt  DateTime @default(now())
}

model ServiceRequest {
  id             String          @id @default(uuid()) @db.Uuid
  customer       User            @relation("CustomerRequests", fields: [customerId], references: [id])
  customerId     String          @db.Uuid
  title          String
  description    String
  category       ServiceCategory
  budgetMin      Float
  budgetMax      Float
  aiStackSuggest String[]
  timeline       String?
  priority       String?
  ndaSigned      Boolean         @default(false) // ‚úÖ Make sure this is added
  status         RequestStatus   @default(OPEN)
  createdAt      DateTime        @default(now())
  matches        AiMatch[]
  project        Project?        @relation(fields: [projectId], references: [id])
  proposals      Proposal[] // üëà Add this
  projectId      String?         @db.Uuid
  requirements   Json? // or String?
  deliverables   Json? // or String?
}

model Proposal {
  id             String         @id @default(uuid()) @db.Uuid
  provider       User           @relation(fields: [providerId], references: [id])
  providerId     String         @db.Uuid
  serviceRequest ServiceRequest @relation(fields: [requestId], references: [id])
  requestId      String         @db.Uuid
  bidAmount      Float
  deliveryTime   Int // in days
  coverLetter    String
  attachmentUrl  String? // e.g., PDF proposal or portfolio
  createdAt      DateTime       @default(now())
  milestones     Milestone[] // Optional: Link to separate milestone model
}

model AiMatch {
  id         String         @id @default(uuid()) @db.Uuid
  request    ServiceRequest @relation(fields: [requestId], references: [id])
  requestId  String         @db.Uuid
  provider   User           @relation(fields: [providerId], references: [id])
  providerId String         @db.Uuid
  matchScore Float
  aiReason   String
}

model Project {
  id             String           @id @default(uuid()) @db.Uuid
  title          String
  description    String
  category       ServiceCategory
  budgetMin      Float
  budgetMax      Float
  timeline       String?
  priority       String?
  skills         String[] // if using Postgres array
  customer       User             @relation("CustomerProjects", fields: [customerId], references: [id])
  customerId     String           @db.Uuid
  provider       User             @relation("ProviderProjects", fields: [providerId], references: [id])
  providerId     String           @db.Uuid
  status         ProjectStatus
  ndaSigned      Boolean          @default(false)
  milestones     Milestone[]
  payments       Payment[]
  review         Review? // 1-to-1
  messages       Message[]
  invoices       Invoice[]
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  ServiceRequest ServiceRequest[]
  requirements   String?
  deliverables   String?
}

model Invoice {
  id             String    @id @default(uuid()) @db.Uuid
  invoiceNumber  String    @unique @map("invoice_number") @db.VarChar(100)
  projectId      String?   @map("project_id") @db.Uuid
  providerId     String    @map("provider_id") @db.Uuid
  customerId     String    @map("customer_id") @db.Uuid
  status         String    @default("draft") @db.VarChar(50)
  subtotal       Decimal   @db.Decimal(10, 2)
  taxAmount      Decimal   @default(0.00) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount Decimal   @default(0.00) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount    Decimal   @map("total_amount") @db.Decimal(10, 2)
  currency       String    @default("MYR") @db.VarChar(3)
  issueDate      DateTime  @map("issue_date") @db.Date
  dueDate        DateTime  @map("due_date") @db.Date
  paidDate       DateTime? @map("paid_date") @db.Date
  notes          String?
  terms          String?
  invoiceData    Json?     @map("invoice_data")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  project  Project?  @relation(fields: [projectId], references: [id])
  provider User      @relation("InvoicesAsProvider", fields: [providerId], references: [id], onDelete: Cascade)
  customer User      @relation("InvoicesAsCustomer", fields: [customerId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("invoices")
}

model Milestone {
  id          String          @id @default(uuid()) @db.Uuid
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String          @db.Uuid
  title       String
  description String
  dueDate     DateTime
  amount      Float
  status      MilestoneStatus @default(PENDING)
  payments    Payment[]
  Proposal    Proposal?       @relation(fields: [proposalId], references: [id])
  proposalId  String?         @db.Uuid
}

model Payment {
  id          String        @id @default(uuid()) @db.Uuid
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String        @db.Uuid
  milestone   Milestone?    @relation(fields: [milestoneId], references: [id])
  milestoneId String?       @db.Uuid
  amount      Float
  method      PaymentMethod
  status      PaymentStatus
  Invoice     Invoice?      @relation(fields: [invoiceId], references: [id])
  invoiceId   String?       @db.Uuid
}

model Message {
  id              String      @id @default(uuid()) @db.Uuid
  projectId       String?     @map("project_id") @db.Uuid
  senderId        String      @map("sender_id") @db.Uuid
  receiverId      String      @map("receiver_id") @db.Uuid
  messageType     MessageType @default(text) @map("message_type")
  subject         String?     @db.VarChar(255)
  content         String
  attachments     String[]
  isRead          Boolean     @default(false) @map("is_read")
  readAt          DateTime?   @map("read_at") @db.Timestamptz(6)
  parentMessageId String?     @map("parent_message_id") @db.Uuid
  messageThreadId String?     @map("message_thread_id") @db.Uuid
  isSystemMessage Boolean     @default(false) @map("is_system_message")
  priority        String      @default("normal") @db.VarChar(20)
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  project       Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender        User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  parentMessage Message?  @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies       Message[] @relation("MessageReplies")

  @@map("messages")
}

// ‚îÄ‚îÄ KYC enums
enum KycDocType {
  PROVIDER_ID // Passport/IC
  COMPANY_REG // SSM/registration doc
  COMPANY_DIRECTOR_ID // optional director ID
  OTHER
}

enum KycDocStatus {
  uploaded
  verified
  rejected
}

// ‚îÄ‚îÄ KYC documents per user (admin reviews files; user has overall kycStatus already)
model KycDocument {
  id          String       @id @default(uuid()) @db.Uuid
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @db.Uuid
  type        KycDocType
  fileUrl     String
  filename    String
  mimeType    String?
  status      KycDocStatus @default(uploaded)
  reviewNotes String?
  reviewedBy  String?      @db.Uuid // admin userId (optional now)
  uploadedAt  DateTime     @default(now())
  reviewedAt  DateTime?

  @@index([userId])
  @@index([type])
}

enum Role {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum KycStatus {
  active
  inactive
  suspended
  pending_verification
}

enum ServiceCategory {
  WEB_DEVELOPMENT        @map("web_development")
  MOBILE_APP_DEVELOPMENT @map("mobile_app_development")
  CLOUD_SERVICES         @map("cloud_services")
  IOT_SOLUTIONS          @map("iot_solutions")
  DATA_ANALYTICS         @map("data_analytics")
  CYBERSECURITY          @map("cybersecurity")
  UI_UX_DESIGN           @map("ui_ux_design")
  DEVOPS                 @map("devops")
  AI_ML_SOLUTIONS        @map("ai_ml_solutions")
  SYSTEM_INTEGRATION     @map("system_integration")
}

enum RequestStatus {
  OPEN
  MATCHED
  CLOSED
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  DISPUTED
}

enum MilestoneStatus {
  PENDING
  COMPLETED
  RELEASED
}

enum PaymentMethod {
  FPX
  STRIPE
  EWALLET
}

enum PaymentStatus {
  ESCROWED
  RELEASED
  REFUNDED
}

enum MessageType {
  text
  file
  system
  proposal
}
